/// -----------------------------------------------------------------------------------------
/// PatternExplorer.com - Configuration file
/// Version: 2.3
/// Copyright © PatternExplorer.com
/// @link https://www.PatternExplorer.com
/// Email: support@PatternExplorer.com
/// -----------------------------------------------------------------------------------------


/// 	SECTION 0 - Theme definition
/// -----------------------------------------------------------------------------------------
global PeTheme; // PeTheme can be used in all tools for more specific customization
PeTheme = WriteIf(IsDarkBackground(), "Dark", "Light");

/*
"Light" is preferred for dark colors on light background.
Optimized for these AmiBroker themes: Basic, Nature Simple, Nature Gradient and Grey

"Dark" is preferred for light colors on dark background.
Optimized for these AmiBroker themes: Dark Grey and Black
*/


/// 	SECTION 1 - Composite indicator settings
/// -----------------------------------------------------------------------------------------
def_CompMarket = "^DJI";


/// 	SECTION 2 - Default buy, sell, short and cover rules. They are added to the PatternExplorer signals.
/// -----------------------------------------------------------------------------------------

// Initialize signals
Buy = 0; Sell = 0; Short = 0; Cover = 0;

def_Buy = 1;
def_Sell = 1;
def_Short = 1;
def_Cover = 1;


/// 	SECTION 3 - Default filter and columns
/// -----------------------------------------------------------------------------------------
def_Filter = 1;
// Any default filter for all tools can be defined here.
// The filter definition will be overwritten when the variable def_Filter is defined in the PE - Extensions file

procedure AddDefaultColumns()
{
    AddColumn(C, "Close", 0, IIf(C > Ref(C, -1), colorGreen, IIf(C < Ref(C, -1), colorRed, colorBlue)));
    AddColumn(ROC(C, 1), "Change %", 0, IIf(C > Ref(C, -1), colorGreen, IIf(C < Ref(C, -1), colorRed, colorBlue)));
    AddColumn(V, "Volume", 1.0, IIf(V > Ref(V, -1) AND C > Ref(C, -1), colorGreen,
                                      IIf(V > Ref(V, -1)AND C < Ref(C, -1), colorRed, colorBlue)), colorDefault);
}

SetSortColumns(-2); // Sort results by date column 


/// 	SECTION 4 - Main definitions, optimized for light & dark chart theme
/// -----------------------------------------------------------------------------------------
/// It's a good idea to adjust the colors here as they are used in the settings below. So they need to be adjusted only in one place.
def_Green 	 = IIF(PeTheme == "Light", colorGreen, 	 colorBrightGreen);
def_Red 	 = IIF(PeTheme == "Light", colorRed, 	 colorRed);
def_Blue 	 = IIF(PeTheme == "Light", colorBlue, 	 ColorRGB(255, 232, 102));
def_Black 	 = IIF(PeTheme == "Light", colorBlack, 	 colorWhite);
def_Brown 	 = IIF(PeTheme == "Light", colorBrown, 	 colorTan);
def_DarkRed  = IIf(PeTheme == "Light", colorDarkRed, ColorRGB(255, 10, 10)); 
def_Orange	 = IIf(PeTheme == "Light", colorOrange,  colorLightOrange); 

def_LineWidth = -5;

/// 	SECTION 5 - Price settings
/// -----------------------------------------------------------------------------------------
def_PE_AB_Style = 1; // PatternExplorer style => 0, Amibroker style => 1
def_PriceStyle = styleBar;
upBar = C >= O;
dnBar = C < O;

def_upBarColor = def_Black;
def_dnBarColor = def_Red;
def_defaultColor = def_upBarColor;

def_GraphXSpace = 5; // Shrink the chart vertically

// Volume - overlayed at price
def_PlotVolume = 0; // Use 1 to overlay it on all price charts
def_VolumeUpColor = def_Green;
def_VolumeDnColor = def_Red;
def_VolumeNeutralColor = def_Blue;
def_VolumeHeight = 4;


/// 	SECTION 6 - Performance chart settings
/// -----------------------------------------------------------------------------------------
def_Market1 = "^GSPC";
def_Market2 = "^iix";
def_Market3 = "^btk";
def_Market4 = "^soxx";
def_Color_Selected_Market = def_Black;


/// 	SECTION 7 - Text and other default colors
/// -----------------------------------------------------------------------------------------
def_TextColor1 = def_Brown;
def_TextColor2 = def_Black;
def_TextColor3 = def_Blue;
def_TextColor4 = def_Black;
def_TextColor5 = def_Red;
def_TextColor6 = def_Red;
def_TextColor7 = def_Red;

def_Color1 = def_Green;
def_Color2 = def_Red;
def_Color3 = def_Brown;
def_Color4 = def_Blue;
def_Color5 = colorBlueGrey;
def_Color6 = def_Blue;
def_Color7 = colorLightBlue;
def_Color8 = colorPink;
def_Color9 = def_Red;
def_Color10 = colorRose;
def_Color11 = def_Black;
def_Color12 = def_Orange;
def_Color13 = colorGrey50;
def_Color14 = colorTurquoise;
def_Color15 = def_Brown;


/// 	SECTION 8 - Taio settings
/// -----------------------------------------------------------------------------------------
def_TaioPeriod1 = 5;
def_TaioPeriod2 = 6;
def_TrendLevel = 50;

def_TAIO_upColor = def_Green;
def_TaioPositiveRangeColor = ColorRGB(103, 218, 103);
def_TaioNegativeRangeColor = ColorRGB(255, 149, 149);
def_TAIO_dnColor = def_Red;
def_TaioTimeFrame2UpColor = def_Blue;
def_TaioTimeFrame2DnColor = def_DarkRed;

def_TaioPriceMode = 0; // Off => 0 // Rising/Falling/Range => 1 // Range/Trend => 2  // Rising/Falling => 3  // Zero based => 4
def_RibbonsMode = 1; // Off => 0 // Rising/Falling/Range => 1 // Range/Trend => 2  // Rising/Falling => 3  // Zero based => 4
def_TaioIndicatorMode = 1; // Rising/Falling/Range => 1, Range/Trend => 2, Rising/Falling => 3, Zero based => 4, Single Color => 5
def_SecondTFSwitch = 1; // Off => 0 //On => 1 - switch to display the 2nd TF in the indicator
def_SecondTFTaioMultiplier = 4;


/// 	SECTION 9 - Bands and channels settings
/// -----------------------------------------------------------------------------------------
def_BandSwitch = 0; // Off => 0 // On => 1
def_BandTyp = 4; // Bollinger Bands => 1 // Headley Acceleration Bands => 2 // Keltner Channel => 3 // Price Channel => 4
def_BandPeriod = 20;
def_BandWidth = 2;
def_BandStyle = styleLine;
def_MidStyle = styleLine;
def_BandColor = def_Blue;
def_MidColor = def_Blue;


/// 	SECTION 10 - Parabolic SAR settings
/// -----------------------------------------------------------------------------------------
def_PSARSwitch = 0; // Off =>  0 // On =>  1
def_PSARUpColor = def_Green;
def_PSARDnColor = def_Red;


/// 	SECTION 11 - Gradient background settings
/// -----------------------------------------------------------------------------------------
def_BackgroundColorSwitch = 0;
def_BackgroundTopColor = IIF(PeTheme == "Light", colorLavender, colorBlueGrey);
def_BackgroundBottomColor = ColorRGB(234, 234, 234);
def_TitleBackgroundColor = ColorRGB(234, 234, 234);


/// 	SECTION 12 - Averages - settings
/// -----------------------------------------------------------------------------------------
def_Avg1Switch = 0; 
def_Avg2Switch = 0;
def_Avg3Switch = 0;
def_Avg4Switch = 0;

def_Avg1Period = 5;
def_Avg2Period = 50;
def_Avg3Period = 100;
def_Avg4Period = 200;

// Open => 0, High => 1, Low => 2, Close => 3, Average(H+L+C)/3  => 4
def_Avg1PriceField = 3;
def_Avg2PriceField = 3;
def_Avg3PriceField = 3;
def_Avg4PriceField = 3;

// GMA => 1, SMA => 2, EMA => 3, WMA => 4, DEMA => 5, TEMA => 6,
// Wilders => 7, LINEAR REGRESSION => 8, TIME SERIES FORECAST => 9, KAMA => 10
def_Avg1Type = 1;
def_Avg2Type = 2;
def_Avg3Type = 2;
def_Avg4Type = 2;

def_Avg1Style = styleLine;
def_Avg2Style = styleLine;
def_Avg3Style = styleLine;
def_Avg4Style = styleLine;

def_Avg1Color = def_Blue;
def_Avg2Color = def_Red;
def_Avg3Color = def_Green;
def_Avg4Color = def_DarkRed;


/// 	SECTION 13 - Settings for miscellaneous tools
/// -----------------------------------------------------------------------------------------

//	Alert 2 - Indicator
def_IndicatorColor = def_Blue;

//	Guppy MMA
def_GuppyLineStyle = styleLine;
def_GuppyLineColor1 = IIF(PeTheme == "Light", ColorRGB(147, 147, 147), colorTurquoise);
def_GuppyLineColor2 = def_Orange;

//	Ichimoku Chart
def_Cloud1Color = def_Green;
def_Cloud2Color = def_Orange;
def_StandardLineColor = def_Black;

//	Rainbow Chart
def_LinesORShadows = 1; // Lines =>  0, Shadows =>  1

//	Pattern Recognition
def_ShadowColor = IIF(PeTheme == "Light", ColorRGB(240, 240, 240), ColorRGB(50, 50, 50));
def_SLRLColor = IIF(PeTheme == "Light", ColorRGB(80, 120, 160), ColorRGB(180, 200, 220));
def_Plot_P1P2_Shapes = 1; // Hide shapes =>  0, Plot shapes =>  1
def_ParallelLinesSwitch = 1;
def_PatternPriceBasisCPR = 1; // Close =>  0 // High & Low =>  1

//	SI Relative Strength
def_SectorColor = def_Blue;
def_IndustryColor = def_Green;
def_MarketStrengthColor = def_Brown;

//	SI Trend
def_SectorTrendColor = def_Blue;
def_IndustryUpColor = def_Green;

//	Fibonacci Recognition
def_SupportLineColor = def_Green;
def_ResistanceLineColor = def_Color2;
def_SwingLowColor = def_Green;
def_SwingHighColor = def_Color2;


def_Level1Color = def_Black;
def_Level2Color = def_Blue;
def_Level3Color = def_Black;
def_Level4Color = def_Black;
def_Level5Color = def_Blue;
def_Level6Color = def_Black;
def_Level7Color = def_Blue;


//	Macd Modified
def_MACD_Color = def_Red;
def_Signal_Color = def_Blue;
def_Histogram_Color = def_Black;

//	Schaff Trend Cycle
def_STC_Color = def_Blue;
def_STC_TF2_Color = def_Red;

//	Heikin Ashi Indicator
def_ColorHeikinAshi = def_Blue;
def_ColorHeikinAshiDiffco = def_Red;

//	Pivot Tool
def_PivotTyp = 1; // Regular => 1 // Woodies FIB => 2 // Woodies => 3",
def_PivotLineMode = 1; // Entire line => 0 // Not entire line => 1
def_LineMode = 1; // Entire line => 0 // Not entire line => 1
def_ShadowSwitch = 0; // Off => 0 // On => 1
def_TitleDisplay = 0; // Horizontal => 0 // Vertikal => 1
def_R12ShadowColor = colorPink;
def_ResistanceColor = def_Red;
def_RP_Color = def_Green; // Rising pivot line
def_FP_Color = def_Red; // Falling pivot line
def_SupportColor = def_Green;
def_S12ShadowColor = colorPaleGreen;

//	Fractals
def_PatternPriceBasisFractals = 1; // Close =>  0 // High & Low =>  1


/// 	SECTION 14 - Shapes
/// -----------------------------------------------------------------------------------------
def_BuyShape = shapeUpArrow;
def_BuyShapeColor = def_Green;
def_BuyShapeOffset = 12;

def_SellShape = shapeDownArrow;
def_SellShapeColor = def_Red;
def_SellShapeOffset = 12;

def_ShortShape = shapeHollowDownArrow;
def_ShortShapeColor = def_Red;
def_ShortShapeOffset = 12;

def_CoverShape = shapeHollowUpArrow;
def_CoverShapeColor = def_Green;
def_CoverShapeOffset = 12;


/// 	SECTION 15 - Alert settings
/// -----------------------------------------------------------------------------------------
def_AudioAlert = 0;
def_EmailAlert = 0;
def_BarComplete = 0;

def_AudioAlertText = ", Close =" + NumToStr(C);
def_EmailAlertText = ", Close =" + NumToStr(C);

/*
Select from 55 different sounds for different signals:

alert0,1,2,3,4,5,6,7,8,9,10,11
advisor, Argh, Blip, BOOT-111-loud, cashmin, cellRingLong, congrats, Cymbols, done, drums,
dtmf, electronicRing, ENTER, findlist, hoho, im, imrcv, imsend, MarginCall, message, MinCompanyEquity,
newemail, online, PositionClosed, postiue, PriceAlert, requoted, ring, secalert, Siren,
SOUND3, SOUND4, SOUND7, SOUND9, SOUND24, SOUND30, SOUND38, SOUND43, SOUND50,
SOUND54, SOUND240, talkend, updalert
*/

soundDirectory = "SOUND C:\\Windows\\Media\\Sounds\\"; // Path to the sound directory

def_BuySound1 = soundDirectory + "alert1.wav";
def_BuySound2 = soundDirectory + "Blip.wav";
def_BuySound3 = soundDirectory + "findlist.wav";
def_SellSound1 = soundDirectory + "PriceAlert.wav";
def_SellSound2 = soundDirectory + "requoted.wav";
def_SellSound3 = soundDirectory + "ring.wav";
def_ShortSound1 = soundDirectory + "secalert.wav";
def_ShortSound2 = soundDirectory + "PriceAlert.wav";
def_ShortSound3 = soundDirectory + "chimes.wav";
def_CoverSound1 = soundDirectory + "updalert.wav";
def_CoverSound2 = soundDirectory + "electronicRing.wav";
def_CoverSound3 = soundDirectory + "Cymbols.wav";
def_BuySetupSound1 = soundDirectory + "message.wav";
def_BuySetupSound2 = soundDirectory + "alert3.wav";
def_BuySetupSound3 = soundDirectory + "alert5.wav";
def_ShortSetupSound1 = soundDirectory + "alert6.wav";
def_ShortSetupSound2 = soundDirectory + "alert7.wav";
def_ShortSetupSound3 = soundDirectory + "alert8.wav";
def_Sound1 = soundDirectory + "alert9.wav";
def_Sound2 = soundDirectory + "alert10.wav";
def_Sound3 = soundDirectory + "alert11.wav";


/// 	SECTION 16 - ToolTip text
/// -----------------------------------------------------------------------------------------
def_ToolTip =
    StrFormat("Open = %g \nHigh = %g \nLow = %g \nClose = %g", O, H, L, C) +
    "\nVolume = " + NumToStr(V, 1.0) +
    "\n\nX=" + DateTimeToStr(GetCursorXPosition())
    + "\nY=" + GetCursorYPosition();


/// 	SECTION 17 - Interpretation text
/// -----------------------------------------------------------------------------------------
if(Status("action") == actionCommentary)
{
    //	Define your interpretation text here.
    //	Example:
    //	printf("Taio indicator = " + NumToStr(PeTaio()));
}


/// 	SECTION 18 - Title
/// -----------------------------------------------------------------------------------------
def_title = StrFormat(" - {{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) {{VALUES}}", O, H, L, C, SelectedValue(ROC(C, 1)));


/// 	SECTION 19 - Use Parameter from Chart
/// -----------------------------------------------------------------------------------------
//	Can be used to synchronize chart parameters with automatic analysis parameters. 
// 	By default they are completely isolated. It allows to change the parameter in the chart in order to
// 	use the same value in the automatic analysis parameters without setting it manually in both places.
def_UseParametersFromChart = False;
def_UseAlertParamsFromChart = False;


/// 	SECTION 20 - Add custom code before PatternExplorer code.
/// -----------------------------------------------------------------------------------------
//	The following code allows you to add any custom code to any tool. Just use the Formula names as displayed in the workspace.

procedure AddCustomCodeBeforePE()
{
    if(FormulaName == "PE - SI Relative Strength")
    {
        def_Filter = 1; // Filter set to 1 because common filter conditions are mostly not useful in the composite indicators.
    }
    else
        if(FormulaName == "PE - Candlesticks")
        {
            // AddColumn(MA(C, 5) > MA(C, 20), "MA(C, 5) > MA(C, 20)", 1.0); // Example to add a column before all PatternExplorer columns and only in the Candlestick tool.
            // Plot(PeTaio(), "PeTaio", colorBlue, 1+styleOwnScale, -100, 100); // Example to overlay the TAIO indicator over the Price Chart in the Candlestick tool.
        }
        else
        {
            //	do anything
        }
}


/// 	SECTION 21 - Add custom code after PatternExplorer code.
/// -----------------------------------------------------------------------------------------
procedure AddCustomCodeAfterPE()
{
    if(FormulaName == "PE - Alert 1 - Price")
    {
        // AddColumn(H == HHV(H, 20), "H == HHV(H, 20)", 1.0);// Example to add a column after all PatternExplorer columns in PE - Alert 1 - Price.
    }

    // AddColumn(RSI() < 30, "RSI() < 30"); // Example to add a column after all PatternExplorer columns in all tools.
    
	if(InAA)
		AddCandleColumn();
		
    AddTextColumn(SectorID(1), "Sector", 1.2, colorDarkGrey);
    AddTextColumn(IndustryID(1), "Industry", 1.2, colorBrown);
    AddTextColumn(FullName(), "Full name");
}
