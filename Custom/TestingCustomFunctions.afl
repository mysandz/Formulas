
//Gets all trend bars for the last number of bars 
// example call would be getTrendBars(C>Ref(C,-1), 2)
function getTrendBars(conditionArray, lastBars) {
    result = Null;
	for(bar =lastBars; bar < BarCount; bar++) {
	    condition=True;
		for(lBar=bar-lastBars; lBar < bar; lBar++) {
			if(!conditionArray[lBar]) {
				condition=False;
				break;
			}
		}
		if(condition) {
		   result[bar] = bar;
		}
	}
	return result;
}

function getUpTrend(timePeriod) {
	return getTrendBars( O < C && C > Ref(C, -1), timePeriod);
}

function getDownTrend(timePeriod) {
	return getTrendBars( O > C && C < Ref(C, -1), timePeriod);
}

function upDownTrendBars(trend1Bars, trend2Bars) {
	result = Null;
	for(bar =1; bar < BarCount; bar++) {
		if(trend1Bars[bar] != 0) {
		  result[bar] = trend1Bars[bar];
		} else {
			if(trend2Bars[bar] != 0) {
			  result[bar] = trend2Bars[bar];
			} else {
			  result[bar] = result[bar-1];
			} 
		}
	}
	return result;
}

function llBarSince(previousBar, currBar){
   pBars = LLVBars(L, currBar-previousBar);
   return currBar-pBars[currBar];
}

function hhBarSince(previousBar, currBar){
   pBars = HHVBars(H, currBar-previousBar);
   return currBar-pBars[currBar];
}

function setTrendLine(trendLine, i1Array, i2Array, sBar, eBar) {
    slope = ((i2Array[eBar] - i1Array[sBar])/(eBar-sBar));
	for(i=sBar ;i<=eBar ;i++ ) {
		trendLine[i] = i1Array[sBar] + (i-sBar) * slope;
	}
	return trendLine;
}

function drawTrendLines(upTrendBars, dnTrendBars) {
	pBar=prevBar=0;
	upTrend=Null;
	trendLine = Null;
	for(bar =1; bar < BarCount; bar++) {
		if(upTrendBars[bar] != 0) {
		  pBar = llBarSince(prevBar, bar);
		  hBar = hhBarSince(pBar, bar);
		  if(!upTrend) { //to blend trends - this is a fix for gap up between trend changes 
			 trendLine = setTrendLine(trendLine, H, L, prevBar, pBar);
		  }
		  trendLine = setTrendLine(trendLine, L, H, pBar, hBar);
		  upTrend=True;
		} else {
			if(dnTrendBars[bar] != 0) {
			  pBar = hhBarSince(prevBar, bar);
			  lBar = llBarSince(pBar, bar);
			  if(upTrend) {
				trendLine = setTrendLine(trendLine, L, H, prevBar, pBar);
			  }
			  trendLine = setTrendLine(trendLine, H, L, pBar, lBar);
			  upTrend=False;
			} 
		}
		
		if(upTrendBars[bar] != 0 || dnTrendBars[bar] != 0) {
			prevBar = pBar;
		}else {
			if(upTrend) {
				hBar = hhBarSince(prevBar, bar);
				trendLine = setTrendLine(trendLine, L, H, prevBar, hBar);
			}else {
				if(!upTrend) {
					//pBar = hhBarSince(prevBar, bar);
					lBar = llBarSince(prevBar, bar);
					trendLine = setTrendLine(trendLine, H, L, prevBar, lBar);
				}
			}
		}
	}
	Plot(trendLine, "Trend Line", colorYellow, styleLine);
	return trendLine;
}

SetTradeDelays(0, 0, 0, 0);
oTimeperiod = Optimize("Time Period", 3, 2, 5, 1);
timePeriod = Param("Time Period", 2, 2, 6, 1);
upTrend = getUpTrend(timePeriod);
dnTrend = getDownTrend(timePeriod);
upTrend = ExRem(upTrend, dnTrend);
dnTrend = ExRem(dnTrend, upTrend);
upDnTrend = upDownTrendBars(upTrend, dnTrend);

Plot(Close,"Close",colorBlack,styleBarNoTicks | styleCloud, Null, Null, Null, -1 );
PlotShapes(IIf(upTrend, Low + shapeHollowUpTriangle, shapeNone), colorGreen);
PlotShapes(IIf(dnTrend, High + shapeHollowDownTriangle, shapeNone), colorRed); 
drawTrendLines(upTrend, dnTrend);

Buy=upTrend;
Sell=dnTrend;
Short = Sell;
Cover = Buy;

ApplyStop(stopTypeLoss, 
          stopModePercent, 
          Optimize( "Max. loss stop level", 1, 1, 10, 1 ), 
          True); 
          
ApplyStop(stopTypeProfit, 
			stopModePercent, 
			Optimize( "Trailing profit stop level", 8, 1, 30, 1 ), 
			True);
			
ApplyStop(stopTypeTrailing , 
			stopModePercent, 
			Optimize( "Trailing profit stop level", 4, 1, 30, 1 ), 
			True);